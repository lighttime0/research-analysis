整体思路：通过Intent中的FLAG定位启动StartupMenu的PID，通过PID定位属于StartupMenu的doTraversal操作，根据操作所消耗的时间证实第一次启动和非第一次启动在某次doTraversal消耗时间上存在明显差异，有较大可能性是性能问题的根源。

从Click到doTraversal路径（参考之前说的文章的1,2两部分）：上传图片

判断Intent包含flag的方法：

AMS中：
ActivityRecord构造之前：(intent.getFlags() & Intent.FLAG_ACTIVITY_RUN_STARTUP_MENU) != 0
ActivityRecord构造之后，其命名一般为r：(r.intent.getFlags() & Intent.FLAG_ACTIVITY_RUN_STARTUP_MENU) != 0
Activity中存在mIntent成员变量：(mIntent.getFlags() & Intent.FLAG_ACTIVITY_RUN_STARTUP_MENU) != 0

进入viewRootImpl之后需要根据前一次log信息锁定执行handleLaunchActivity的PID，以此为依据去索取doTraversal信息。

方法仍待优化，对于路径有疑问或者有错误可以随时提出。

更新：通过使用Process.myPid()方法在handleLaunchActivity处获取pid并保存（目前使用Slog中的静态变量保存，之后会思考怎样保存更合适），在ViewRootImpl中再次获取并保证新的pid和保存的pid一致的情况下才打印log，可定向地获取某一个Activity的ViewRootImpl情况。无需重复取log。

更新：基本锁定在mAttachInfo.mHardwareRenderer.fence()方法在第一次启动StartupMenu时耗费了大量的时间，但这是一个native方法，继续跟下去有一定的难度。

更新：巨大的时间延迟发生在RenderProxy::postAndWait函数中对mSyncCondition.wait(mSyncMutex)方法的调用上。然而这个方法是Condition Mutex方法的一环，问题肯定不是出在这里。通过对全局Log尤其是OpenGLRender相关Log的观测，应用第一次打开和隔了很久之后打开时才会出现Initialized EGL相关的log，这部分内容是在另一个thread里执行的createSurface方法调用的，个人认为卡顿很可能和surface的重新创建相关。然而surface的创建有何引起还有待进一步分析。

更新：通过对postAndWait函数的整理，对mutex，condition方式在android中应用的学习以及对fence()方法作用的进一步验证，结合对systrace的分析，有充分的证据证明wait是在等待draw方法的完成，同归对draw方法及其jni方法syncAndDrawFrame进行跟踪，发现该方法所返回的结果会根据是否包含SYNC_LOST_SURFACE_REWARD_IF_FOUND和SYNC_INVALIDATE_REQUIRED两个flag而重复调用mViewRootImpl.invalidate()方法，导致进行了fence()应用所在线程持续等待，并造成时间的消耗。这一现象会发生在StartupMenu的第一次启动和其它应用的每一次启动。可以认为该问题同资源回收相关，但具体联系还有待验证。

更新：上述分析有误，performDraw没有引发重复调用，调用是发生在systemui线程的，很遗憾仍无法判断wait的等待目标，但可以肯定的是与draw方法存在联系
